// <auto-generated />
using System;
using Culinary_Assistant_Main.Infrastructure;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;

#nullable disable

namespace Culinary_Assistant_Main.Infrastructure.Migrations
{
    [DbContext(typeof(CulinaryAppContext))]
    [Migration("20250511132721_feedback model")]
    partial class feedbackmodel
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasDefaultSchema("MainAppSchema")
                .HasAnnotation("ProductVersion", "9.0.3")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("Culinary_Assistant_Main.Domain.Models.Feedback", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<Guid>("ReceiptId")
                        .HasColumnType("uuid");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.HasIndex("ReceiptId");

                    b.HasIndex("UserId");

                    b.ToTable("Feedbacks", "MainAppSchema");
                });

            modelBuilder.Entity("Culinary_Assistant_Main.Domain.Models.Receipt", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<int>("Category")
                        .HasColumnType("integer");

                    b.Property<int>("CookingDifficulty")
                        .HasColumnType("integer");

                    b.Property<string>("CookingSteps")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<int>("CookingTime")
                        .HasColumnType("integer");

                    b.Property<string>("Ingredients")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("MainPictureUrl")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("PicturesUrls")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<int>("Popularity")
                        .HasColumnType("integer");

                    b.Property<double>("Rating")
                        .HasColumnType("double precision");

                    b.Property<string>("Tags")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("Receipts", "MainAppSchema");
                });

            modelBuilder.Entity("Culinary_Assistant_Main.Domain.Models.ReceiptCollection", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<int>("Color")
                        .HasColumnType("integer");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<bool>("IsPrivate")
                        .HasColumnType("boolean");

                    b.Property<int>("Popularity")
                        .HasColumnType("integer");

                    b.Property<double>("Rating")
                        .HasColumnType("double precision");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("ReceiptCollections", "MainAppSchema");
                });

            modelBuilder.Entity("Culinary_Assistant_Main.Domain.Models.ReceiptCollectionLike", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<Guid>("LikedEntityId")
                        .HasColumnType("uuid")
                        .HasColumnName("ReceiptCollectionId");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.HasIndex("LikedEntityId");

                    b.HasIndex("UserId");

                    b.ToTable("ReceiptCollectionLikes", "MainAppSchema");
                });

            modelBuilder.Entity("Culinary_Assistant_Main.Domain.Models.ReceiptCollectionRate", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<Guid>("EntityId")
                        .HasColumnType("uuid")
                        .HasColumnName("ReceiptCollectionId");

                    b.Property<int>("Rating")
                        .HasColumnType("integer");

                    b.Property<Guid?>("UserId")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.HasIndex("EntityId");

                    b.HasIndex("UserId");

                    b.ToTable("ReceiptCollectionRates", "MainAppSchema");
                });

            modelBuilder.Entity("Culinary_Assistant_Main.Domain.Models.ReceiptLike", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<Guid>("LikedEntityId")
                        .HasColumnType("uuid")
                        .HasColumnName("ReceiptId");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.HasIndex("LikedEntityId");

                    b.HasIndex("UserId");

                    b.ToTable("ReceiptLikes", "MainAppSchema");
                });

            modelBuilder.Entity("Culinary_Assistant_Main.Domain.Models.ReceiptRate", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<Guid>("EntityId")
                        .HasColumnType("uuid")
                        .HasColumnName("ReceiptId");

                    b.Property<int>("Rating")
                        .HasColumnType("integer");

                    b.Property<Guid?>("UserId")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.HasIndex("EntityId");

                    b.HasIndex("UserId");

                    b.ToTable("ReceiptRates", "MainAppSchema");
                });

            modelBuilder.Entity("Culinary_Assistant_Main.Domain.Models.User", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<bool>("IsAdmin")
                        .HasColumnType("boolean");

                    b.Property<string>("PasswordHash")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("ProfilePictureUrl")
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("Users", "MainAppSchema");
                });

            modelBuilder.Entity("ReceiptReceiptCollection", b =>
                {
                    b.Property<Guid>("ReceiptCollectionsId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("ReceiptsId")
                        .HasColumnType("uuid");

                    b.HasKey("ReceiptCollectionsId", "ReceiptsId");

                    b.HasIndex("ReceiptsId");

                    b.ToTable("ReceiptReceiptCollection", "MainAppSchema");
                });

            modelBuilder.Entity("Culinary_Assistant_Main.Domain.Models.Feedback", b =>
                {
                    b.HasOne("Culinary_Assistant_Main.Domain.Models.Receipt", "Receipt")
                        .WithMany("Feedbacks")
                        .HasForeignKey("ReceiptId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Culinary_Assistant_Main.Domain.Models.User", "User")
                        .WithMany("Feedbacks")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.OwnsOne("Culinary_Assistant.Core.ValueTypes.Text", "Text", b1 =>
                        {
                            b1.Property<Guid>("FeedbackId")
                                .HasColumnType("uuid");

                            b1.Property<string>("Value")
                                .IsRequired()
                                .HasColumnType("text");

                            b1.HasKey("FeedbackId");

                            b1.ToTable("Feedbacks", "MainAppSchema");

                            b1.WithOwner()
                                .HasForeignKey("FeedbackId");
                        });

                    b.Navigation("Receipt");

                    b.Navigation("Text")
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("Culinary_Assistant_Main.Domain.Models.Receipt", b =>
                {
                    b.HasOne("Culinary_Assistant_Main.Domain.Models.User", "User")
                        .WithMany("Receipts")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.OwnsOne("Culinary_Assistant.Core.ValueTypes.Nutrients", "Nutrients", b1 =>
                        {
                            b1.Property<Guid>("ReceiptId")
                                .HasColumnType("uuid");

                            b1.Property<double>("Calories")
                                .HasColumnType("double precision");

                            b1.Property<double>("Carbohydrates")
                                .HasColumnType("double precision");

                            b1.Property<double>("Fats")
                                .HasColumnType("double precision");

                            b1.Property<double>("Proteins")
                                .HasColumnType("double precision");

                            b1.HasKey("ReceiptId");

                            b1.ToTable("Receipts", "MainAppSchema");

                            b1.WithOwner()
                                .HasForeignKey("ReceiptId");
                        });

                    b.OwnsOne("Culinary_Assistant.Core.ValueTypes.Text", "Description", b1 =>
                        {
                            b1.Property<Guid>("ReceiptId")
                                .HasColumnType("uuid");

                            b1.Property<string>("Value")
                                .IsRequired()
                                .HasColumnType("text");

                            b1.HasKey("ReceiptId");

                            b1.ToTable("Receipts", "MainAppSchema");

                            b1.WithOwner()
                                .HasForeignKey("ReceiptId");
                        });

                    b.OwnsOne("Culinary_Assistant.Core.ValueTypes.Text", "Title", b1 =>
                        {
                            b1.Property<Guid>("ReceiptId")
                                .HasColumnType("uuid");

                            b1.Property<string>("Value")
                                .IsRequired()
                                .HasColumnType("text");

                            b1.HasKey("ReceiptId");

                            b1.ToTable("Receipts", "MainAppSchema");

                            b1.WithOwner()
                                .HasForeignKey("ReceiptId");
                        });

                    b.Navigation("Description")
                        .IsRequired();

                    b.Navigation("Nutrients")
                        .IsRequired();

                    b.Navigation("Title")
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("Culinary_Assistant_Main.Domain.Models.ReceiptCollection", b =>
                {
                    b.HasOne("Culinary_Assistant_Main.Domain.Models.User", "User")
                        .WithMany("ReceiptCollections")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.OwnsOne("Culinary_Assistant.Core.ValueTypes.Text", "Title", b1 =>
                        {
                            b1.Property<Guid>("ReceiptCollectionId")
                                .HasColumnType("uuid");

                            b1.Property<string>("Value")
                                .IsRequired()
                                .HasColumnType("text");

                            b1.HasKey("ReceiptCollectionId");

                            b1.ToTable("ReceiptCollections", "MainAppSchema");

                            b1.WithOwner()
                                .HasForeignKey("ReceiptCollectionId");
                        });

                    b.Navigation("Title")
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("Culinary_Assistant_Main.Domain.Models.ReceiptCollectionLike", b =>
                {
                    b.HasOne("Culinary_Assistant_Main.Domain.Models.ReceiptCollection", "Entity")
                        .WithMany("Likes")
                        .HasForeignKey("LikedEntityId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Culinary_Assistant_Main.Domain.Models.User", "User")
                        .WithMany("ReceiptCollectionLikes")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Entity");

                    b.Navigation("User");
                });

            modelBuilder.Entity("Culinary_Assistant_Main.Domain.Models.ReceiptCollectionRate", b =>
                {
                    b.HasOne("Culinary_Assistant_Main.Domain.Models.ReceiptCollection", "Entity")
                        .WithMany("Rates")
                        .HasForeignKey("EntityId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Culinary_Assistant_Main.Domain.Models.User", "User")
                        .WithMany("CollectionRates")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.SetNull);

                    b.Navigation("Entity");

                    b.Navigation("User");
                });

            modelBuilder.Entity("Culinary_Assistant_Main.Domain.Models.ReceiptLike", b =>
                {
                    b.HasOne("Culinary_Assistant_Main.Domain.Models.Receipt", "Entity")
                        .WithMany("Likes")
                        .HasForeignKey("LikedEntityId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Culinary_Assistant_Main.Domain.Models.User", "User")
                        .WithMany("ReceiptLikes")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Entity");

                    b.Navigation("User");
                });

            modelBuilder.Entity("Culinary_Assistant_Main.Domain.Models.ReceiptRate", b =>
                {
                    b.HasOne("Culinary_Assistant_Main.Domain.Models.Receipt", "Entity")
                        .WithMany("Rates")
                        .HasForeignKey("EntityId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Culinary_Assistant_Main.Domain.Models.User", "User")
                        .WithMany("ReceiptRates")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.SetNull);

                    b.Navigation("Entity");

                    b.Navigation("User");
                });

            modelBuilder.Entity("Culinary_Assistant_Main.Domain.Models.User", b =>
                {
                    b.OwnsOne("Culinary_Assistant.Core.ValueTypes.Email", "Email", b1 =>
                        {
                            b1.Property<Guid>("UserId")
                                .HasColumnType("uuid");

                            b1.Property<string>("Value")
                                .HasColumnType("text");

                            b1.HasKey("UserId");

                            b1.ToTable("Users", "MainAppSchema");

                            b1.WithOwner()
                                .HasForeignKey("UserId");
                        });

                    b.OwnsOne("Culinary_Assistant.Core.ValueTypes.Login", "Login", b1 =>
                        {
                            b1.Property<Guid>("UserId")
                                .HasColumnType("uuid");

                            b1.Property<string>("Value")
                                .IsRequired()
                                .HasColumnType("text");

                            b1.HasKey("UserId");

                            b1.ToTable("Users", "MainAppSchema");

                            b1.WithOwner()
                                .HasForeignKey("UserId");
                        });

                    b.OwnsOne("Culinary_Assistant.Core.ValueTypes.Phone", "Phone", b1 =>
                        {
                            b1.Property<Guid>("UserId")
                                .HasColumnType("uuid");

                            b1.Property<long?>("Value")
                                .HasColumnType("bigint");

                            b1.HasKey("UserId");

                            b1.ToTable("Users", "MainAppSchema");

                            b1.WithOwner()
                                .HasForeignKey("UserId");
                        });

                    b.Navigation("Email")
                        .IsRequired();

                    b.Navigation("Login")
                        .IsRequired();

                    b.Navigation("Phone")
                        .IsRequired();
                });

            modelBuilder.Entity("ReceiptReceiptCollection", b =>
                {
                    b.HasOne("Culinary_Assistant_Main.Domain.Models.ReceiptCollection", null)
                        .WithMany()
                        .HasForeignKey("ReceiptCollectionsId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Culinary_Assistant_Main.Domain.Models.Receipt", null)
                        .WithMany()
                        .HasForeignKey("ReceiptsId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Culinary_Assistant_Main.Domain.Models.Receipt", b =>
                {
                    b.Navigation("Feedbacks");

                    b.Navigation("Likes");

                    b.Navigation("Rates");
                });

            modelBuilder.Entity("Culinary_Assistant_Main.Domain.Models.ReceiptCollection", b =>
                {
                    b.Navigation("Likes");

                    b.Navigation("Rates");
                });

            modelBuilder.Entity("Culinary_Assistant_Main.Domain.Models.User", b =>
                {
                    b.Navigation("CollectionRates");

                    b.Navigation("Feedbacks");

                    b.Navigation("ReceiptCollectionLikes");

                    b.Navigation("ReceiptCollections");

                    b.Navigation("ReceiptLikes");

                    b.Navigation("ReceiptRates");

                    b.Navigation("Receipts");
                });
#pragma warning restore 612, 618
        }
    }
}
